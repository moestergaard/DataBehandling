import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D


# def plot_confidence_intervals(data_sets, labels, title):
#     fig, ax = plt.subplots()
#     # x = np.arange(len(data_sets[0][0]))
#     x = np.arange(len(data_sets[0]))
#     print(x)
#     width = 0.01

#     confidence_level = 0.95
#     z_score = 2.776
    
#     colors = ['blue', 'orange', 'green', 'red', 'purple']

#     for j, data_set in enumerate(data_sets):
#         for i, data in enumerate(data_set):
#             mean = np.mean(data)
#             std = np.sqrt(np.sum((data-mean)**2)/(len(data)-1))
#             margin_of_error = z_score * (std / np.sqrt(len(data)))
#             lower_bound = mean - margin_of_error
#             upper_bound = mean + margin_of_error

#             # Plot data points
#             print(i)
#             print(j)
#             print(x)
#             print(x[i]+(j-2)*width, mean, colors[j])
#             ax.plot(x[i]+(j-2)*width, mean, marker='o', color=colors[j])

#             # Plot error bars
#             ax.errorbar(x[i]+(j-2)*width, mean, yerr=margin_of_error, fmt='none', ecolor=colors[j], capsize=3)

#             # Add confidence interval labels
#             # if j == 0:
#             #     ax.text(x[i], upper_bound+0.001, '{:.4f}'.format(upper_bound), ha='center')
#             #     ax.text(x[i], lower_bound-0.003, '{:.4f}'.format(lower_bound), ha='center')

#     # Set axis labels and title
#     ax.set_xticks(x)
#     ax.set_xticklabels(['Eget dataset morgen', 'Eget dataset aften', 'Anden dag morgen', 'Andet tidspunkt morgen', 'Anden dag aften', 'Andet tidspunkt aften'], rotation=45)
#     fig.subplots_adjust(bottom=0.3)
#     # ax.set_xticklabels(['data_1', 'data_2', 'data_3', 'data_4', 'data_5', 'data_6'])
#     ax.set_xlabel('Data set')
#     ax.set_ylabel('Accuracy')
#     ax.set_title(title)

#     # Add legend
#     ax.legend(labels)

#     # Show plot
#     plt.show()
    
    
def plot_confidence_intervals(data_sets, labels, title):
    fig, ax = plt.subplots()
    x = np.arange(len(data_sets[0]))
    width = 0.15

    confidence_level = 0.95
    z_score = {2: 4.303, 3: 3.182, 4: 2.776, 5: 2.571, 6: 2.447, 7: 2.365, 8: 2.306, 9: 2.262, 10: 2.228, 11: 2.201, 12: 2.179, 13: 2.160, 14: 2.145}
    # z_score = {2: 1.96, 3: 1.96}
    # z_score = 2.132
    
    # colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'teal']
    # colors = ['red', 'green', 'blue', 'orange', 'purple', 'teal', 'brown']
    colors = ['blue', 'orange', 'green', 'red', 'purple', 'pink', 'gray']

    for j, data_set in enumerate(data_sets):
        for i, data in enumerate(data_set):
            mean = np.mean(data)
            std = np.sqrt(np.sum((data-mean)**2)/(len(data)-1))
            margin_of_error = z_score[len(data)-1] * (std / np.sqrt(len(data)))
            lower_bound = mean - margin_of_error
            upper_bound = mean + margin_of_error

            # Plot data points
            ax.plot(x[i]+j*width, mean, marker='o', color=colors[j], label=labels[j] if i == 0 else "")

            # Plot error bars
            ax.errorbar(x[i]+j*width, mean, yerr=margin_of_error, fmt='none', ecolor=colors[j], capsize=3)

            # Add confidence interval labels
            # if j == 0:
            #     ax.text(x[i]+j*width, upper_bound+0.001, '{:.4f}'.format(upper_bound), ha='center')
            #     ax.text(x[i]+j*width, lower_bound-0.003, '{:.4f}'.format(lower_bound), ha='center')

    # Set axis labels and title
    ax.set_xticks(x+width)
    # ax.set_xticklabels(['Formiddag: Eget dataset', 'Aften: Eget dataset', 'Formiddag: Anden dag', 'Formiddag: Andet tidspunkt', 'Aften: Anden dag', 'Aften: Andet tidspunkt'], rotation=45)
    ax.set_xticklabels(['Formiddag: Anden dag', 'Formiddag: Andet tidspunkt', 'Aften: Anden dag', 'Aften: Andet tidspunkt'], rotation=45)
    fig.subplots_adjust(bottom=0.35)
    fig.subplots_adjust(right=0.8)
    # ax.set_xlabel('Data set')
    ax.set_ylabel('NÃ¸jagtighed')
    ax.set_title(title)

    # Add legend
    # ax.legend(labels, bbox_to_anchor=(1.05, 0.5), loc='center left')
    handles = [Line2D([0], [0], color=color, linewidth=2) for color in colors]
    ax.legend(handles=handles, labels=labels, loc='center left', bbox_to_anchor=(1, 0.5))
    # ax.legend()

    # Show plot
    plt.show()
    
    
# def plot_confidence_intervals(data_sets, labels, title):
#     fig, ax = plt.subplots()
#     x = np.arange(len(data_sets[0]))
#     width = 0.01
#     confidence_level = 0.95
#     z_score = 2.776
#     colors = ['blue', 'orange', 'green', 'red', 'purple']

#     for j, data_set in enumerate(data_sets):
#         for i, data in enumerate(data_set):
#             mean = np.mean(data)
#             std = np.sqrt(np.sum((data-mean)**2)/(len(data)-1))
#             margin_of_error = z_score * (std / np.sqrt(len(data)))
#             lower_bound = mean - margin_of_error
#             upper_bound = mean + margin_of_error

#             # Plot data points
#             ax.plot(x[i]+(j-2)*width, mean, marker='o', color=colors[j])

#             # Plot error bars
#             ax.errorbar(x[i]+(j-2)*width, mean, yerr=margin_of_error, fmt='none', ecolor=colors[j], capsize=3)

#     # Set axis labels and title
#     ax.set_xticks(x)
#     ax.set_xticklabels(['Eget dataset morgen', 'Eget dataset aften', 'Anden dag morgen', 'Andet tidspunkt morgen', 'Anden dag aften', 'Andet tidspunkt aften'], rotation=45)
#     fig.subplots_adjust(bottom=0.3)
#     ax.set_xlabel('Data set')
#     ax.set_ylabel('Accuracy')
#     ax.set_title(title)

#     # Add legend
#     ax.legend(labels, bbox_to_anchor=(1.05, 0.5), loc='center left')

#     # Show plot
#     plt.show()


# Define data
# dataSVM3 = [
#     [0.8917,	0.8871,	0.8510,	0.8619,	0.8309],
#     [0.8960,	0.8766,	0.8638,	0.8496,	0.8507],
#     [0.7885,	0.7823,	0.7658,	0.7781,	0.7361],
#     [0.8118,	0.7741,	0.8052,	0.7906,	0.7856], 
#     [0.8290,	0.8218,	0.8022,	0.8231,	0.7959],
#     [0.7863,	0.7900,	0.7679,	0.7659,	0.7707]
# ]

# """ SVM 4 """
# dataSVM4 = [
#     [0.8053, 0.7730, 0.7553, 0.7163, 0.6936],
#     [0.7950, 0.7882, 0.7419, 0.7217, 0.6793],
#     [0.6348, 0.6375, 0.6342, 0.6216, 0.6237],
#     [0.6265, 0.5296, 0.6289, 0.6325, 0.6139],
#     [0.6400, 0.6525, 0.6442, 0.6511, 0.6123],
#     [0.6337, 0.6510, 0.6462, 0.6315, 0.5989]
# ]

# """ NN3-B """
# dataNN3B = [
#     [0.7572, 0.6048, 0.5374, 0.5091, 0.4611],
#     [0.7785, 0.6651, 0.6102, 0.6018, 0.5110],
#     [0.6535, 0.5382, 0.5050, 0.4695, 0.4516],
#     [0.6680, 0.5673, 0.5118, 0.4905, 0.4586],
#     [0.7193, 0.6105, 0.5808, 0.5708, 0.4764],
#     [0.6318, 0.5523, 0.5299, 0.5414, 0.4622]
# ]

# """ NN3-UB """
# dataNN3UB = [
#     [0.7188, 0.6823, 0.6036, 0.5104, 0.5049],
#     [0.7376, 0.6998, 0.5639, 0.5482, 0.5451],
#     [0.6475, 0.6213, 0.5698, 0.4746, 0.4770],
#     [0.6743, 0.6304, 0.5817, 0.5083, 0.4999],
#     [0.6837, 0.6402, 0.5411, 0.5225, 0.5230],
#     [0.6079, 0.5860, 0.5084, 0.4845, 0.4869]
# ]

# """ NN4-UB """
# dataNN4UB = [
#     [0.6148, 0.5326, 0.4243, 0.3866, 0.3058],
#     [0.6822, 0.5867, 0.4486, 0.4286, 0.4193],
#     [0.4864, 0.4566, 0.3822, 0.3577, 0.2904],
#     [0.4824, 0.4711, 0.4022, 0.3627, 0.2862],
#     [0.5060, 0.5026, 0.4077, 0.3999, 0.3662],
#     [0.5087, 0.4982, 0.4105, 0.3991, 0.3842]
# ]







# """ NEW DATA ONLY FROM 45 MINUTES"""

# # Define data
# dataSVM3 = [
#     [0.8714285714285714, 0.9012681159420289, 0.8653675819309123, 0.9059674502712477],
#     [0.8994661921708185, 0.8857913669064749, 0.9090106007067138],
#     [0.7265100671140939, 0.7447519083969466, 0.7890305508780371, 0.8160535117056856],
#     [0.7630703422053232, 0.7870722433460076, 0.8343631178707225, 0.847671102661597],
#     [0.8341063146628612, 0.8375886524822695, 0.7977085571070534],
#     [0.802298437780571, 0.7913449452325373, 0.7647692583946849]
# ]

# """ SVM 4 """
# dataSVM4 = [
#     [0.811662198391421, 0.7833109017496636, 0.7526525198938993, 0.8436657681940701],
#     [0.7473262032085561, 0.8127090301003345, 0.852],
#     [0.5934596140100071, 0.6302640970735189, 0.6525636428827537, 0.6492510699001427],
#     [0.5501693102833719, 0.6366066654785243, 0.6259133844234539, 0.6872215291391909],
#     [0.6361935311414061, 0.6686264029930519, 0.5910671302487296],
#     [0.646743500402037, 0.6718038059501474, 0.6056017153578129]
# ]

# """ NN3-B """
# dataNN3B = [
#     [0.7071428571428572, 0.776566757493188, 0.6802480070859167, 0.8318264014466547],
#     [0.7633451957295374, 0.7648648648648648, 0.8074204946996466],
#     [0.612895493767977, 0.6226145038167938, 0.610777002646139, 0.767797419971333],
#     [0.4227661596958175, 0.6337927756653993, 0.685361216730038, 0.7789923954372624],
#     [0.7242240456653586, 0.6790780141843972, 0.7547440028643037],
#     [0.6367390913988149, 0.549470281917759, 0.6656491291075597]
# ]

# """ NN3-UB """
# dataNN3UB = [
#     [0.6911369740376008, 0.7465940054495913, 0.704162976085031, 0.7332730560578662],
#     [0.7001779359430605, 0.745945945945946, 0.7667844522968198],
#     [0.636385426653883, 0.6414599236641222, 0.6410873225884051, 0.6710463449593884],
#     [0.627851711026616, 0.6668250950570342, 0.7255228136882129, 0.684648288973384],
#     [0.6621476988940421, 0.6297872340425532, 0.7590404582885786],
#     [0.6054947028191776, 0.4938049919195547, 0.7069491829771952]
# ]

# """ NN4-UB """
# dataNN4UB = [
#     [0.7198391420911529, 0.6256720430107527, 0.5722811671087533, 0.5414699932569117],
#     [0.6183155080213903, 0.6608695652173913, 0.7675350701402806],
#     [0.46729807005003576, 0.4942897930049964, 0.5048404446038006, 0.4791369472182596],
#     [0.45820709320976655, 0.4713954731776867, 0.5360898235608625, 0.4808412047763322],
#     [0.5690991713445602, 0.5093532870122929, 0.43942230542925914],
#     [0.49343339587242024, 0.45537389439828463, 0.5171535781291879]
# ]


""" NEW DATA ONLY FROM 45 MINUTES"""

# Define data
dataSVM3 = [
    [0.7828612926652142, 0.7889518413597734, 0.7917570498915402, 0.7437365783822477, 0.7046742209631728, 0.8228488792480115, 0.690050107372942, 0.8046477850399419, 0.8438177874186551, 0.807444523979957, 0.8511256354393609, 0.806657223796034],
    [0.795017793594306, 0.7795389048991355, 0.7469964664310954, 0.7672597864768683, 0.8321325648414986, 0.8148409893992933, 0.7814946619217081, 0.8162824207492796, 0.841696113074205, 0.8327402135231317, 0.8544668587896254, 0.8240282685512368],
    [0.8436599423631124, 0.8318021201413428, 0.8455516014234875, 0.8254416961130742, 0.801423487544484, 0.8328530259365994],
    [0.7430207587687903, 0.7857661583151779, 0.8101983002832861, 0.8228488792480115, 0.7158196134574087, 0.7516339869281046, 0.7953257790368272, 0.8373101952277657, 0.6649964209019327, 0.8235294117647058, 0.8172804532577904, 0.7758496023138105]
]

""" SVM 4 """
dataSVM4 = [
    [0.6151776103336921, 0.5753715498938429, 0.5571736785329018, 0.5535905680600214, 0.554140127388535, 0.633764832793959, 0.617363344051447, 0.6119483315392895, 0.6316073354908306, 0.6404072883172561, 0.7120559741657696, 0.6841825902335457],
    [0.5967914438502674, 0.5222043873729267, 0.4962606837606838, 0.586096256684492, 0.6345639379347244, 0.6260683760683761, 0.6112299465240641, 0.5987158908507223, 0.6533119658119658, 0.6310160427807486, 0.7233814874264313, 0.7136752136752137],
    [0.64633493846977, 0.625, 0.6422459893048128, 0.7158119658119658, 0.6149732620320856, 0.6131621187800963],
    [0.5878885316184351, 0.6792249730893434, 0.6459660297239915, 0.6418554476806904, 0.5482315112540193, 0.6442411194833154, 0.6130573248407644, 0.7745415318230853, 0.5493033226152197, 0.6630785791173305, 0.6539278131634819, 0.5916936353829557]
]

""" NN3-B """
dataNN3B = [
    [0.6252723311546841, 0.5106232294617564, 0.4924078091106291, 0.6607015032211883, 0.6444759206798867, 0.6536514822848879, 0.5826771653543307, 0.6180101670297748, 0.6536514822848879, 0.6964924838940587, 0.7254901960784313, 0.6975920679886686],
    [0.5231316725978647, 0.5244956772334294, 0.488339222614841, 0.6170818505338078, 0.6635446685878963, 0.7031802120141343, 0.6562277580071174, 0.6562277580071174, 0.6593639575971731, 0.7238434163701067, 0.7824207492795389, 0.7858657243816255],
    [0.7089337175792507, 0.6558303886925795, 0.6761565836298933, 0.6303886925795052, 0.6903914590747331, 0.6822766570605188],
    [0.670722977809592, 0.5802469135802469, 0.5432011331444759, 0.6644974692697035, 0.4853256979241231, 0.5272331154684096, 0.4440509915014164, 0.6464208242950108, 0.6478167501789549, 0.738562091503268, 0.6565155807365439, 0.6305133767172812]
]

""" NN3-B-P """
dataNN3BP = [
    [0.4731601257683388, 0.39461996446919867, 0.3683883947503606, 0.5152489419148251, 0.49765778796754206, 0.504309853050475, 0.4444705605829122, 0.47154285963016995, 0.4956795667131823, 0.522369362920544, 0.5512113447740529, 0.5369652374321794],
    [0.3946524064171123, 0.3905749892569124, 0.3759077452345569, 0.4732620320855615, 0.5109590777069974, 0.5539147427421337, 0.5197860962566845, 0.5197860962566845, 0.5101112814332018, 0.5529411764705882, 0.5901433751832806, 0.6132870733334114],
    [0.5318243478962317, 0.4999836178752384, 0.5229946524064172, 0.527585157794966, 0.5272727272727272, 0.5280804342872163],
    [0.514769312248452, 0.4392475272978417, 0.41799407019734003, 0.5032306938382073, 0.4327575996691051, 0.5027024805049222, 0.45644926057521484, 0.5204918888796364, 0.4938582982418921, 0.5646664947441862, 0.49768329572189945, 0.4994561136153079]
]

""" NN3-UB """
dataNN3UB = [
    [0.6151053013798112, 0.5184135977337111, 0.660882140274765, 0.5597709377236937, 0.5594900849858357, 0.5502530730296457, 0.5096635647816751, 0.6100217864923747, 0.6146059291395517, 0.506084466714388, 0.4749455337690632, 0.48158640226628896],
    [0.6206405693950178, 0.6527377521613833, 0.5667844522968198, 0.5387900355871886, 0.5814121037463977, 0.6063604240282685, 0.6441281138790036, 0.6441281138790036, 0.6537102473498233, 0.5209964412811388, 0.5561959654178674, 0.5724381625441696],
    [0.6786743515850144, 0.6515901060070671, 0.6405693950177936, 0.5413427561837456, 0.7224199288256228, 0.7377521613832853],
    [0.6249105225483178, 0.4495279593318809, 0.5191218130311614, 0.6637744034707158, 0.5390121689334287, 0.5134350036310821, 0.4780453257790368, 0.4584237165582068, 0.651395848246242, 0.7233115468409586, 0.6706798866855525, 0.6717281272595806]
]

""" NN3-UB-P """
dataNN3UBP = [
    [0.4704655829332115, 0.401522062707063, 0.5172550336096766, 0.42995613506249303, 0.4302107840783599, 0.4212469069923786, 0.4227594006651476, 0.4935956190118232, 0.4724870164940906, 0.4760452263684136, 0.4241355917271567, 0.3972067508522591],
    [0.47754010695187166, 0.5077492705920208, 0.44165506266162724, 0.41229946524064176, 0.4446144062406782, 0.47373126294480394, 0.5010695187165776, 0.5010695187165776, 0.5021062731836319, 0.40267379679144377, 0.42267774266290853, 0.46137329011572803],
    [0.5532293344525345, 0.6149720918803169, 0.4941176470588235, 0.49055336477141087, 0.5791443850267379, 0.577304235067831],
    [0.5187895017193407, 0.4402626537291724, 0.5302311902818457, 0.537212471185971, 0.44103951049538076, 0.4666525550728289, 0.4173263672156335, 0.35328656370976447, 0.4922782294682636, 0.5528242198608457, 0.508836186200605, 0.5431455192014486]
]

""" NN4-UB """
dataNN4UB = [
    [0.5446716899892358, 0.5015923566878981, 0.49460625674217906, 0.5310825294748124, 0.5159235668789809, 0.580906148867314, 0.47266881028938906, 0.5597416576964478, 0.49730312837108953, 0.40514469453376206, 0.46932185145317545, 0.3970276008492569],
    [0.5224598930481283, 0.4943820224719101, 0.42467948717948717, 0.5181818181818182, 0.48796147672552165, 0.5283119658119658, 0.5684491978609626, 0.5684491978609626, 0.47863247863247865, 0.4737967914438503, 0.4483681112894596, 0.43856837606837606],
    [0.5591225254146602, 0.5416666666666666, 0.4475935828877005, 0.6041666666666666, 0.49411764705882355, 0.4751203852327448],
    [0.5680600214362272, 0.6076426264800862, 0.6125265392781316, 0.5943905070118662, 0.3912111468381565, 0.5182992465016146, 0.40498938428874737, 0.5080906148867314, 0.48767416934619506, 0.5430570505920345, 0.4888535031847134, 0.5048543689320388]
]


# Define data matrices and labels
data_sets = [dataSVM3, dataSVM4, dataNN3B, dataNN3BP, dataNN3UB, dataNN3UB, dataNN4UB]
labels = ['SVM3', 'SVM4', 'NN3-B', 'NN3-B-P', 'NN3-UB', 'NN3-UB-P', 'NN4-UB']
# labels = ['SVM3', 'SVM4', 'NN3-B', 'NN3-UB', 'NN4-UB']

# Plot confidence intervals
plot_confidence_intervals(data_sets, labels, 'Konfidensintervaler for forskellige modeller')
